package c230830;

public class Main {
	public static void main(String[] args) {
		System.out.println("라이브러리란 무엇일까?");
		// 도서관, 책들이 있다. => 정보의 모음이다.
		// 2층 인문관, 3층 전문서적
		// 책 => 데이터, 기능
		// 클래스 => 변수(데이터), 메서드(기능)
		// 분류 => 책을 어떻게 분류? 내용, 종류에 따라
		// 분류 => 데이터나 기능에 따라
		
		// 모듈 || 라이브러리
		// 모듈 => 새로운 기계를 꽂아넣는다? => 모듈을 장착한다.
		// 모듈 => (장비 / 기계)(모듈)를 새롭게 추가한다.
		// 프로그래밍에서의 모듈? => 폴더, 패키지, 프로젝트
		
		// 라이브러리 => library
		// src => sources
		// library= > lib
		// 기계어를 저장하는 binary => bin
		
		// 프레임워크 || 라이브러리 || 모듈
		// 프레임워크 => 기능의 집합체, 가져다 사용한다.
		// 프레임워크 VS 라이브러리
		// 프레임워크 => frame : 틀, 뼈대 / work : 일하다
		// 프레임워크 => 일하는 틀? => 틀을 만든다. => 틀에서 일한다. | 틀에 맞춰서 일한다.
		// 일한다 => 코드작성 => 틀에 맞춘데 => 규칙이 정해져있는 라이브러리다.
		
//		모듈 인포쪽에서는 따로 빼고할수잇는데
//		나머지는 전부 넣어줘야한다.
//
//		c프로젝트에서 b프로젝트로 넣어주고
//		b프로젝트에서 a프로젝트로 넣어줫을 때
//		a프로젝트에서는 c프로젝트의 내용을 쓸수없다
//		a프로젝트에도 b프로젝트의 내용을 따로 넣어줘야한다.
//
//		transitive
//		b라는 모듈에 requires transitive c , d 등등을 해주면
//		b모듈에 c,d정보가 저장이 되고 만약 a에서 b를 requires 해주면
//		b의 정보와 c,d 정보까지 불러온다
//		만약 transitive가 없다면 b의 정보만 가져온다!!
//		requires
//		exports
//
//		깊은복사
//		arraycopy
//		clone
//		얕은복사
//
//		순수함수(순수메서드)
//		외부의 영향을 전혀 받지않으며
//		부수효과가 없는 함수
//		어떤 함수에 동일한 인자를 주엇을 때 항상 같은 값을 리턴하는 함수
//		외부의 상태를 변경하지 않는 함수
//		캡슐화하기 편리함
		
	}
}
